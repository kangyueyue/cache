// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"github.com/kangyueyue/road"
	"github.com/zuozikang/cache"
)

// Injectors from wire.go:

// InitializeApp 初始化
func InitializeApp(addr int, f string) (*App, error) {
	server, err := ProvideServer(addr)
	if err != nil {
		return nil, err
	}
	v := kamacache.DefaultPickerOptions()
	clientPicker, err := kamacache.NewClientPicker(addr, v...)
	if err != nil {
		return nil, err
	}
	config, err := NewConfig()
	if err != nil {
		return nil, err
	}
	store, err := ProvideStore(config)
	if err != nil {
		return nil, err
	}
	group := ProvideGroup(store)
	roadRoad, err := road.InitRoad(f)
	if err != nil {
		return nil, err
	}
	client := ProvideRedisClient(config)
	app := NewApp(server, clientPicker, group, roadRoad, config, client, store)
	return app, nil
}

// wire.go:

// AppSet 依赖
var AppSet = wire.NewSet(
	NewApp, road.InitRoad,
)

// 绑定接口和实现类
var PickerSet = wire.NewSet(kamacache.NewClientPicker, kamacache.DefaultPickerOptions, wire.Bind(new(kamacache.PeerPicker), new(*kamacache.ClientPicker)))

// ProviderSet 依赖
var ProviderSet = wire.NewSet(
	ProvideServer,
	ProvideGroup,
)

var DBComponents = wire.NewSet(
	ProvideRedisClient,
	ProvideStore,
)
